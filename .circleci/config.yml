version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      when_to_run:
        type: string
        default: "on_fail"
      workflowid:
        type: string
    steps:
      - run:
          name: "Destroy environments"
          when: << parameters.when_to_run >>
          command: |
            echo "== Sanity check to confirm variables used =="
            echo aws s3 rm "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}" --recursive
            echo aws cloudformation delete-stack --stack-name udapeople-frontend-<<parameters.workflowid>> --region ${AWS_DEFAULT_REGION}
            echo aws cloudformation delete-stack --stack-name udapeople-backend-<<parameters.workflowid>> --region ${AWS_DEFAULT_REGION}
            echo "== Running aws commands to destroy environments =="
            aws s3 rm "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}" --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-<<parameters.workflowid>> --region ${AWS_DEFAULT_REGION}
            aws cloudformation delete-stack --stack-name udapeople-backend-<<parameters.workflowid>> --region ${AWS_DEFAULT_REGION}

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflowid:
        type: string
    steps:
      - run:
          name: "Revert migrations"
          when: on_fail
          command: |
            SUCCESS=$(curl -k  https://kvdb.io/92NGEye9MJm1giTJk2FtfJ/migration_<<parameters.workflowid>>)
            if (( $SUCCESS == 1));
            then
              cd ~/project/backend
              npm install
              npm run migration:revert
            else
              echo "No migration performed to revert back, no action taken"
            fi

jobs:
  build-frontend:
    description: "Build the Frontend app"
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: "Build front-end"
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    description: "Build the Backend app"
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: "Back-end build"
          command: |
             cd backend
             npm install
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    description: "Test the Frontend app build"
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: "Run frontend test"
          command: |
            cd frontend
            npm install
            npm run test

  test-backend:
    description: "Test the Backend app build"
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: "Run backend test"
          command: |
            cd backend
            npm install
            npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: "Scan/Audit frontend"
          command: |
            cd frontend
            npm install
            npm audit fix --force
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: "Scan/Audit backend"
          command: |
            cd backend
            npm install
            npm audit fix --force
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: "Install required tar & gzip packages"
          command: yum install -y tar gzip
      - run:
          name: "Deploy back-end infra on AWS"
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: "Deploy front-end infra on AWS"
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: "Append ip to ansible inventory file"
          command: |
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicDnsName' \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --output text >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment:
          workflowid: ${CIRCLE_WORKFLOW_ID:0:7}

  configure-infrastructure:
    docker:
      - image: python:3.11-rc-alpine
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["fd:75:73:a0:05:11:38:84:9b:8c:25:c1:30:35:40:74"]
      - attach_workspace:
          at: ~/
      - run:
          name: "Install ansible dependencies"
          command: |
            apk add --update ansible
            pip install awscli
      - run:
          name: "Configure server"
          command: |
            echo "== Create required .env file =="
            echo TYPEORM_CONNECTION=postgres >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
            echo "==                           =="
            cat backend/.env
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment:
          workflowid: ${CIRCLE_WORKFLOW_ID:0:7}

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      # Adding AWSCLI because of failures running destroy environment
      - run:
          name: "Install dependencies"  
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip -q awscliv2.zip
            sudo ./aws/install          
      - run:
          name: "Create .env file"
          command: |
            pwd
            echo "== Create required .env file =="
            echo TYPEORM_CONNECTION=postgres >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
            echo "==                           =="
      - run:
          name: "Run migrations"
          command: |
            cd backend
            echo "== Running install =="
            npm install
            echo "== Running migration =="
            npm run migrations > ~/project/backend/migrations_dump.txt
            echo "== Checking migrations_dump file =="
            cat ~/project/backend/migrations_dump.txt
      - run:
          name: "Verify and send migration result to kvdb"
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
                curl -k https://kvdb.io/92NGEye9MJm1giTJk2FtfJ/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            else
                echo "No migration performed"
#                curl -k https://kvdb.io/92NGEye9MJm1giTJk2FtfJ/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d 'No Migration'
            fi
      - destroy-environment:
          workflowid: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflowid: ${CIRCLE_WORKFLOW_ID:0:7}

  deploy-frontend:
    docker:
      - image: python:3.11-rc-alpine
    steps:
      - checkout
      - run:
          name: "Install dependencies - Ansible"
          command: |
            apk add --update ansible
      - run:
          name: "Install depenencies - AWSCLI"  
          command: |
            pip install awscli
      - run:
          name: "Install dependencies - NodeJS & npm"  
          command: |
            apk add --update nodejs npm
      - run:
          name: "Install dependencies - tar & gzip"
          command: |
            apk add --update tar gzip
      - run:
          name: "Capture backend URL"
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicDnsName' --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL} = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: "Deploy frontend objects"
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment:
          workflowid: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflowid: ${CIRCLE_WORKFLOW_ID:0:7}

  deploy-backend:
    docker:
      - image: python:3.11-rc-alpine
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["fd:75:73:a0:05:11:38:84:9b:8c:25:c1:30:35:40:74"]
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: [backend-build]        
      - run:
          name: "Install dependencies - Ansible"
          command: |
            apk add --update ansible
      - run:
          name: "Install depenencies - AWSCLI"  
          command: |
            pip install awscli
      - run:
          name: "Install dependencies - NodeJS & npm"  
          command: |
            apk add --update nodejs npm
      - run:
          name: "Install dependencies - tar & gzip"
          command: |
            apk add --update tar gzip
      - run:
          name: "Deploy backend"
          command: |
            echo "== npm steps =="
            cd backend
            npm i
            npm run build
            echo "== create artifact tar file =="
            cd ..
            pwd
            ls -l
            tar -C backend -czf artifact.tar.gz .
            cp artifact.tar.gz .circleci
            ls .circleci -l
            echo "== run ansible playbook =="
            cd .circleci/ansible
            echo "Contents of inventory.txt:"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy-environment:
          workflowid: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflowid: ${CIRCLE_WORKFLOW_ID:0:7}

  smoke-test:
    docker:
      - image: python:3.11-rc-alpine
    steps:
      - checkout
      - run:
          name: "Install dependencies - Ansible"
          command: |
            apk add --update ansible
      - run:
          name: "Install depenencies - AWSCLI"  
          command: |
            pip install awscli
      - run:
          name: "Install dependencies - NodeJS & npm"  
          command: |
            apk add --update nodejs npm
      - run:
          name: "Install dependencies - curl"  
          command: |
            apk add --update curl
      - run:
          name: "Get backend url - sanity checking"
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicDnsName' --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL} = ${API_URL}"
      - run:
          name: "Backend smoke test."
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicDnsName' --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "Testing ${API_URL}/api/status..."
            if curl "${API_URL}/api/status" | grep "ok"
            then
                return 1
            else
                return 1
            fi
      - run:
          name: "Frontend smoke test."
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
              return 0
            else
              return 1
            fi
      - destroy-environment:
          workflowid: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflowid: ${CIRCLE_WORKFLOW_ID:0:7}

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: "Install dependencies - tar"
          command: |
            yum install -y tar gzip
      - run:
          name: "Grab and export last workflow id"
          command: |
            export LastworkflowID=($(aws cloudformation list-exports --region ${AWS_DEFAULT_REGION} --query "Exports[?Name==\`WorkflowID\`].Value" --output text --no-paginate))
            echo "== Showing workflowid to console =="
            echo "$LastworkflowID"
            echo "$LastworkflowID" > LastworkflowID.txt
            curl -k https://kvdb.io/92NGEye9MJm1giTJk2FtfJ/lastworkflow_${CIRCLE_WORKFLOW_ID:0:7} -d "${LastworkflowID}"
      - run:
          name: "Update cloudfront distribution"
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name InitialStack \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
      - destroy-environment:
          workflowid: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflowid: ${CIRCLE_WORKFLOW_ID:0:7}

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: "Install dependencies - tar"
          command: |
            yum install -y tar gzip
      - run:
          name: "Verify stacks and cleanup if required"
          command: |
            echo "== Grabbing AWS Stacks =="
            export STACKS=($(aws cloudformation list-stacks --stack-status-filter CREATE_COMPLETE --query "StackSummaries[*].StackName" --no-paginate --output text))
            echo "== Grabbing lastworkflow id =="
            export LastworkflowID=$(curl -k https://kvdb.io/92NGEye9MJm1giTJk2FtfJ/lastworkflow_${CIRCLE_WORKFLOW_ID:0:7})
            echo "Lastworkflow =" "$LastworkflowID"
            export LastID="${LastworkflowID: -7}"
            echo "LastID =" "$LastID"
            echo "== Show current cloudformation stacks =="
            printf '%s\n' "${STACKS[@]}"
            if [[ "${STACKS[@]}" =~ "${LastID}"  ]]
            then
              echo "== Cleanup required: Deleting AWS Cloudformation Stacks =="
              echo "Lastworkflow =" "$LastworkflowID"
              echo "LastID =" "$LastID"
              echo "Running the following commands:"
              echo aws s3 rm "s3://udapeople-${LastID}" --recursive
              echo aws cloudformation delete-stack --stack-name "udapeople-backend-${LastID}"
              echo aws cloudformation delete-stack --stack-name "udapeople-frontend-${LastID}"

              aws s3 rm "s3://udapeople-${LastID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-backend-${LastID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${LastID}"
            else
              echo "No cleanup performed: AWS Cloudformation Stacks are still current"
            fi

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - scan-backend:
          requires: [build-backend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-frontend,deploy-backend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]