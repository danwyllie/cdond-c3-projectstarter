version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      when_to_run:
        type: string
        default: "on_fail"
      workflowid:
        type: string
    steps:
      - run:
          name: "Destroy environments"
          when: << parameters.when_to_run >>
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-<<parameters.workflowid>> --region ${AWS_DEFAULT_REGION}
            aws cloudformation delete-stack --stack-name udapeople-frontend-<<parameters.workflowid>> --region ${AWS_DEFAULT_REGION}

jobs:
  build-frontend:
    description: "Build the Frontend app"
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: "Build front-end"
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    description: "Build the Backend app"
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: "Back-end build"
          command: |
             cd backend
             npm install
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    description: "Test the Frontend app build"
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: "Run frontend test"
          command: |
            cd frontend
            npm install
            npm run test

  test-backend:
    description: "Test the Backend app build"
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: "Run backend test"
          command: |
            cd backend
            npm install
            npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: "Scan/Audit frontend"
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force

  scan-backend:

    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: "Scan/Audit backend"
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: "Install required tar & gzip packages"
          command: yum install -y tar gzip
      - run:
          name: "Deploy back-end infra on AWS"
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: "Deploy front-end infra on AWS"
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: "Append ip to ansible inventory file"
          command: |
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:project,Values=udapeople" \
            --output text >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: .
          paths:
            - .circleci/ansible/inventory.txt
      - destroy-environment:
          workflowid: ${CIRCLE_WORKFLOW_ID:0:7}

  configure-infrastructure:
    docker:
      - image: python:3.11-rc-alpine
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["fd:75:73:a0:05:11:38:84:9b:8c:25:c1:30:35:40:74"]
      - attach_workspace:
          at: .
      - run:
          name: "Install ansible dependencies"
          command: |
            apk add --update ansible
            pip install awscli
      - run:
          name: "Configure server"
          command: |
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment:
          workflowid: ${CIRCLE_WORKFLOW_ID:0:7}

  run-migrations:
    docker:
      #- image: circleci/node:13.8.0
      - image: python:3.11-rc-alpine
      #- image: cimg/node:16.13.1
    steps:
      - checkout
      # Adding AWSCLI because of failures running destroy environment
      - run:
          name: "Install dependencies"  
          command: |
            pip install awscli
            apk update
            apk upgrade
            apk add nodejs
            apk add npm
#      - run:
#          name: "Install dependencies"
#          command: |
#            apk add --update npm aws-cli
      - restore_cache:
          keys: [backend-build]
      - run:
          name: "Run migrations"
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
#      - run:
#          name: "Check migration and fix curl issue"
#          command: |
#            cd backend
#            cat migrations_dump.txt | grep "has been executed successfully"
      - run:
          name: "Send migration result to kvdb"
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
                curl --insecure https://kvdb.io/92NGEye9MJm1giTJk2FtfJ/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
      - destroy-environment:
          workflowid: ${CIRCLE_WORKFLOW_ID:0:7}

  deploy-frontend:
    docker:
      - image: python:3.11-rc-alpine
    steps:
      - checkout
      - run:
          name: "Install dependencies - Ansible"
          command: |
            apk add --update ansible
      - run:
          name: "Install depenencies - AWSCLI"  
          command: |
            pip install awscli
      - run:
          name: "Install dependencies - NodeJS & npm"  
          command: |
            apk add --update nodejs npm
      - run:
          name: "Install dependencies - tar & gzip"
          command: |
            apk add --update tar gzip
      - run:
          name: "Capture  backend URL"
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:project,Values=udapeople" --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL} = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: "Deploy frontend objects"
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment:
          workflowid: ${CIRCLE_WORKFLOW_ID:0:7}

  deploy-backend:
    docker:
      - image: python:3.11-rc-alpine
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["fd:75:73:a0:05:11:38:84:9b:8c:25:c1:30:35:40:74"]
      - attach_workspace:
          at: .
      - run:
          name: "Install dependencies - Ansible"
          command: |
            apk add --update ansible
      - run:
          name: "Install depenencies - AWSCLI"  
          command: |
            pip install awscli
      - run:
          name: "Install dependencies - NodeJS & npm"  
          command: |
            apk add --update nodejs npm
      - run:
          name: "Install dependencies - tar & gzip"
          command: |
            apk add --update tar gzip
      - run:
          name: "Deploy backend"
          command: |
            cd backend
            npm i
            npm run build
            cd ..
            tar -C backend -czvf artifact.tar.gz .
            mv artifact.tar.gz .circleci/ansible/roles/deploy/files
            cd .circleci/ansible
            echo "Contents of inventory.txt:"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy-environment:
          workflowid: ${CIRCLE_WORKFLOW_ID:0:7}

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - scan-backend:
          requires: [build-backend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]